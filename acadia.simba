program acadia;
{$I SRL-6/SRL.simba}

const
  ACADIA_LOGS_DTM := DTMFromString('mrAAAAHic42BgYGAFYkkglgBiOSDmAmI2BghggWJOKF8AiMWBWASI+aFqXcy1gCQTQ4CdEUOCtx1DcaQng5OpFoOblS5YnBBgJIBhAAAahgWP');
  ACADIA_TREE_DTM := DTMFromString('mggAAAHicY2NgYJBiZGCQA2IVIJYFYjEo1gbKqQGxDhDrA7EeEGsBcdkUE4aCSeYMFfOsGFJaTBiKptswlPUbM/AD5bBhRhwYAgCumgl2');

const
  INVENTION_BOX := intToBox(615, 568, 638, 591);
  BOGUS_POINT := Point(0, 0);

const
  LOG_ACTION := 3; //1 - Disassemble
                   //2 - Bank
                   //3 - Bank, Disassemble on failure

//Invention topleft 615, 568
//Invention bottomright 638, 591

function beginDisassembleLogs(): Boolean;
var
  slots: TIntegerArray;
  p: TPoint;
begin
  tabBackpack.open();

  slots := findItem(ACADIA_LOGS_DTM, tabBackpack.getSlotBoxes(), false);

  if High(slots) = -1 then
  begin
    result := false;
    exit();
  end;

  tabBackpack.mouseSlot(slots[0] + 1, MOUSE_MOVE);
  gaussBox(p, INVENTION_BOX);

  dragMouse(p);
  result := True;
end;

procedure disassembleLogs();
var
  tries: Integer;
  started: Boolean;
begin
  for tries := 0 to 2 do
  begin
    if(beginDisassembleLogs()) and (progressScreen.isOpen(1200)) then
      break;
  end;

  while(progressScreen.isOpen(600)) do
  begin
    if not(started) then
    begin
      started := True;
      mouseOffClient(OFF_CLIENT_RANDOM, Random(1800));
    end;
    wait(Random(12000));
  end;
end;

function clickBank(): Boolean;
var
  x, y: Integer;
begin
  result := mainScreen.findObject(x, y, [4498175,4826623,8236281], [7,7,9], colorSetting(0), mainScreen.getCenterPoint(), 20, 10, 1, ['Bank', 'chest'], mainScreen.getBounds(), MOUSE_LEFT);
end;

procedure bankLogs();
var
  tries: Integer;
begin
  for tries := 0 to 3 do
  begin
    if(clickBank() and bankScreen.isOpen(6000)) then
      break;
  end;

  if(tries = 3) then
  begin
    writeln('Max tries opening bank');
    bankScreen.close(false);

    if(LOG_ACTION = 3) then disassembleLogs();
    exit;
  end;

  for tries := 0 to 3 do
  begin
    if(bankScreen.isOpen(600) and not bankScreen.isPackEmpty()) then
    begin
      writeLn('Depositing inventory');
      bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY);
    end;
  end;

  bankScreen.close(false);
end;

function findTreeInBox(box: TBox): TPoint;
var
  p: TPointArray;
begin
  if(findDTMs(ACADIA_TREE_DTM, p, box)) then
  begin
    writeLn('Found tree in box: ', box);
    result := MedianTPA(p);
  end
  else
  begin
    writeLn('Couldn''t find a tree in box: ', box);
    result := BOGUS_POINT;
  end;
end;

function findTree(): TPoint;
begin
  result := findTreeInBox(mainScreen.getBounds());
end;

function hoverTree(treePoint: TPoint): Boolean;
begin
  if(treePoint.equals(BOGUS_POINT)) then
  begin
    result := false;
    exit;
  end;

  writeln('Hovering over tree at: ', treePoint);
  mouse(treePoint, MOUSE_MOVE);
  result := isMouseOverText(['Acadia tree'], 1200);
end;

procedure chopTree(treePoint: TPoint);
var
  treeBox: TBox;
  center: TPoint;
begin
  writeln('Chopping tree at point: ', treePoint);
  writeln('Created treebox at: ', treeBox);

  mouse(treePoint, MOUSE_LEFT, MOUSE_HUMAN);

  while(isLoggedIn() and not tabBackpack.isFull()) do
  begin
    center := mainScreen.getCenterPoint();
    treeBox.setBounds(center.X-20,center.Y-20,center.X+20,center.Y+20);

    treePoint := findTreeInBox(treeBox);
    if(treeBox.isPointInside(treePoint)) then
    begin
      mouseOffClient(OFF_CLIENT_RANDOM, random(1800));
      wait(random(3400));
    end
    else break;
  end;
end;

var
  failures: Integer;
  treePoint: TPoint;
begin
  clearDebug();
  setupSRL();

  while(isLoggedIn()) do
  begin
    if(tabBackpack.isFull()) then
    begin
      write('Inventory full');
      if(LOG_ACTION = 1) then
      begin
        writeLn(' - disassembling');
        disassembleLogs();
      end
      else if(LOG_ACTION = 2 or LOG_ACTION = 3) then
      begin
        writeLn(' - banking');
        bankLogs();
      end;
    end;

    for failures := 0 to 5 do
    begin
      treePoint := findTree();
      if(hoverTree(treePoint)) then
      begin
        chopTree(treePoint);
        break;
      end
      else
      begin
        writeln('Failed to hover over a tree -- waiting');
        wait(Random(3600))
      end;
    end;

    wait(random(3600));
  end;

  writeln('Script ended');
  writeln('We are logged in: ', isLoggedIn());
end.
